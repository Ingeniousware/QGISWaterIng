# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'watering_inp_options_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import json
from qgis.PyQt import uic
from PyQt5.QtWidgets import QMessageBox, QHeaderView
from qgis.PyQt import QtWidgets


FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), "watering_inp_options_dialog.ui"))

class Energy:
    def __init__(self):
        self.Global_Efficiency = 75
        self.Global_Price = 0.0
        self.Demand_Charge = 0.0

class Reactions:
    def __init__(self):
        self.Order_Bulk = 1
        self.Order_Tank = 1
        self.Order_Wall = 'First'
        self.Global_Bulk = 0.0
        self.Global_Wall = 0.0
        self.Limiting_Potential = 0.0
        self.Roughness_Correlation = 0.0

class Times:
    def __init__(self):
        self.Duration = '24:00'
        self.Hydraulic_Timestep = '1:00'
        self.Quality_Timestep = '0:05'
        self.Pattern_Timestep = '1:00'
        self.Pattern_Start = '0:00'
        self.Report_Timestep = '1:00'
        self.Report_Start = '0:00'
        self.Start_ClockTime = '12 am'
        self.Statistic = 'None'

class Hydraulics:
    def __init__(self):
        self.Units = 'CFS'
        self.Headloss = 'H-W'
        self.Specific_Gravity = 1.0
        self.Viscosity = 1.0
        self.Trials = 40
        self.Accuracy = 0.001
        self.CHECKFREQ = 2
        self.MAXCHECK = 10
        self.DAMPLIMIT = 0
        self.Unbalanced = 'Continue 10'
        self.Pattern = 1
        self.Demand_Multiplier = 1.0
        self.Emitter_Exponent = 0.5
        self.Quality = 'Chlorine mg/L'
        self.Diffusivity = 1.0
        self.Tolerance = 0.01

    def set_units(self, units):
        valid_units = ["CFS", "GPM", "MGD", "IMGD", "AFD", "LPS", "LPM", "MLD", "CMH", "CMD"]
        if units in valid_units:
            self.Units = units
        else:
            print("Unidad no válida. Las unidades válidas son: CFS, GPM, MGD, IMGD, AFD, LPS, LPM, MLD, CMH, CMD")


class WateringINPOptions(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WateringINPOptions, self).__init__(parent)
        self.setupUi(self)
        
        self.comboBox.addItems(['Energy', 'Reactions', 'Times', 'Hydraulics'])
        
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setHorizontalHeaderLabels(["Property", "Value"])
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        self.buttonBox.accepted.connect(self.accept_function)
        self.buttonBox.rejected.connect(self.cancel_function)
        
         # Diccionario de clases
        self.classes = {
            'Energy': Energy(),
            'Reactions': Reactions(),
            'Times': Times(),
            'Hydraulics': Hydraulics()
        }


    def accept_function(self):
        # Código para manejar la acción de aceptar
        print("Se ha pulsado el botón Aceptar")
        # self.save_changes()
        # Aquí puedes guardar los datos, cerrar la ventana, etc.


    def cancel_function(self):
        # Código para manejar la acción de cancelar
        print("Se ha pulsado el botón Cancelar")
        # Aquí puedes limpiar los datos, cerrar la ventana, etc.


    def save_changes(self):
        # Guardar las propiedades en un archivo JSON
        with open('c:\\Temp\\data.json', 'w') as json_file:
            json.dump({name: vars(instance) for name, instance in self.classes.items()}, json_file)
        
        QMessageBox.information(self, "Éxito", "Los cambios han sido guardados exitosamente.")

